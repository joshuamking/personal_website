{"version":3,"file":"main.js","sourceRoot":"","sources":["main.ts"],"names":[],"mappings":";AAEA,IAAM,UAAU,GAAW,EAAE,CAAC;AAE9B,iBAAkB,SAAiB;IAC/B,IAAM,SAAS,GAAG,SAAS,GAAG,EAAE,CAAC;IACjC,IAAI,GAAG,GAAW,CAAC,CAAC;IAEpB,EAAE,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;QAChB,SAAS,GAAG,EAAE,CAAC;QACf,GAAG,GAAS,SAAS,GAAG,UAAU,GAAG,GAAG,CAAC;IAC7C,CAAC;IAED,GAAG,IAAI,SAAS,GAAG,UAAU,CAAC;IAC9B,MAAM,CAAC,GAAG,CAAC;AACf,CAAC;AAED,MAAM,CAAC,MAAM,GAAG;IAEZ,IAAI,GAAG,GAAe,CAAC,CAAC;IACxB,IAAI,KAAK,GAAa,EAAE,CAAC;IAGzB,OAAO,GAAG,IAAI,CAAC,EAAE,CAAC;QACd,IAAI,QAAQ,GAAK,MAAM,CAAC,oEAAoE,CAAC,CAAC;QAC9F,IAAI,UAAU,GAAG,cAAM,OAAA,GAAG,GAAG,OAAO,CAAC,yDAAyD,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAjF,CAAiF,CAAC;QAEzG,IAAI,CAAC;YACD,EAAE,CAAC,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAAC,GAAG,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAAC,CAAC;YAClE,IAAI,CAAC,CAAC;gBAAC,GAAG,GAAG,GAAG,CAAC;YAAA,CAAC;YAElB,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBACb,UAAU,EAAE,CAAC;YACjB,CAAC;QACL,CAAC;QACD,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YAAC,UAAU,EAAE,CAAC;QAAC,CAAC;QAE7B,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YAC1B,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QACpB,CAAC;IACL,CAAC;IAED,IAAI,WAAW,GAAG,CAAC,CAAC,cAAc,CAAC,CAAC;IACpC,IAAI,QAAQ,GAAM,CAAC,CAAC;IAEpB,IAAI,MAAM,GAAe,EAAE,CAAC;IAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;QACpC,IAAI,SAAS,GAAG,KAAK,CAAE,CAAC,CAAE,CAAC;QAC3B,IAAI,OAAO,GAAK,OAAO,CAAC,SAAS,CAAC,CAAC;QACnC,QAAQ,IAAI,OAAO,CAAC;QAEpB,MAAM,IAAI,oBACR,CAAC,GAAG,CAAC,wBACL,SAAS,wBACR,OAAO,oBACZ,CAAC;IACH,CAAC;IAED,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACzB,CAAC,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,aAAW,QAAQ,QAAK,CAAC,CAAC;AACnD,CAAC,CAAC","sourcesContent":["import htmlString = JQuery.htmlString;\n\nconst hourlyWage: number = 15;\n\nfunction calcPay (thisHours: number) {\n    const overHours = thisHours - 40;\n    let pay         = 0;\n\n    if (overHours > 0) {\n        thisHours = 40;\n        pay       = overHours * hourlyWage * 1.5;\n    }\n\n    pay += thisHours * hourlyWage;\n    return pay;\n}\n\nwindow.onload = () => {\n\n    let num: number     = 1;\n    let hours: number[] = [];\n\n    // Get hours\n    while (num >= 0) {\n        let response   = prompt(\"Enter the number of hours that the employee worked this past week.\");\n        let notANumber = () => num = confirm(\"Response was not a number. Would you like to try again?\") ? 0 : -1;\n\n        try {\n            if (response && response.length > 0) { num = parseInt(response); }\n            else { num = NaN;}\n\n            if (isNaN(num)) {\n                notANumber();\n            }\n        }\n        catch (err) { notANumber(); }\n\n        if (!isNaN(num) && num >= 0) {\n            hours.push(num);\n        }\n    }\n\n    let outputTable = $(\"#output_rows\");\n    let totalPay    = 0;\n\n    let output: htmlString = \"\";\n    for (let i = 0; i < hours.length; i++) {\n        let thisHours = hours[ i ];\n        let thisPay   = calcPay(thisHours);\n        totalPay += thisPay;\n\n        output += `<tr>\n    <td>${i + 1}</td>\n    <td>${thisHours}</td>\n    <td>$${thisPay}.00</td>\n</tr>`;\n    }\n\n    outputTable.html(output);\n    $(\"#total_pay\").text(`Total: $${totalPay}.00`);\n};\n"]}